/**
 * AUTO-GENERATED by scripts/codegen.ts
 * Do not edit manually. Source: JSON Schemas -> Zod validators
 */
/* eslint-disable */
import { z } from "zod";

// ---- deduction_tip.schema.json ----
export const deduction_tipSchema = z.object({ "id": z.string(), "title": z.string(), "description": z.string(), "eligibility": z.object({ "reason": z.string(), "meetsCriteria": z.boolean() }).strict(), "estimatedSavings": z.number().gte(0).optional() }).strict();

// ---- extraction_result.schema.json ----
export const extraction_resultSchema = z.object({ "jobId": z.string(), "sourceFiles": z.array(z.object({ "filename": z.string(), "mimeType": z.string(), "pages": z.number().int().gte(1).optional() })), "modelo100": z.any(), "confidence": z.object({ "overall": z.number().gte(0).lte(1), "fields": z.record(z.number().gte(0).lte(1)).optional() }), "issues": z.array(z.object({ "severity": z.enum(["info","warn","error"]), "message": z.string(), "path": z.string().optional() })).optional() }).strict();

// ---- modelo100.schema.json ----
export const modelo100Schema = z.object({ "taxYear": z.number().int().gte(2000), "taxpayer": z.object({ "nif": z.string().regex(new RegExp("^[A-Z0-9]{8,10}$")), "fullName": z.string().min(3), "residencyStatus": z.enum(["resident","non_resident"]) }).strict(), "spouse": z.object({ "nif": z.string().optional(), "fullName": z.string().optional() }).strict().optional(), "incomes": z.array(z.object({ "category": z.enum(["employment","self_employment","capital","property","other"]), "gross": z.number().gte(0), "withheld": z.number().gte(0).optional() }).strict()).default([]), "deductions": z.array(z.object({ "code": z.string(), "description": z.string().optional(), "amount": z.number().gte(0) }).strict()).default([]), "totals": z.object({ "taxableBase": z.number().gte(0), "calculatedTax": z.number().gte(0).optional(), "finalTaxDue": z.number().optional() }).strict() }).strict();

// ---- plain_summary.schema.json ----
export const plain_summarySchema = z.object({ "headline": z.string(), "bullets": z.array(z.string()), "totals": z.object({ "taxableBase": z.number(), "finalTaxDue": z.number() }), "disclaimers": z.array(z.string()).default([]) }).strict();

// ---- user_progress.schema.json ----
export const user_progressSchema = z.object({ "userId": z.string(), "currentStep": z.enum(["upload","extraction","review","summary","tips","complete"]), "percent": z.number().int().gte(0).lte(100), "lastUpdatedIso": z.string().datetime({ offset: true }), "checkpoints": z.array(z.object({ "step": z.string(), "completedIso": z.string().datetime({ offset: true }) }).strict()).optional() }).strict();

