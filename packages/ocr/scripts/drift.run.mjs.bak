const path=require("path");let tuning={};try{const p=path.resolve(process.cwd(),"packages/ocr/config/tuning.step29.json");tuning=JSON.parse(fs.readFileSync(p,"utf8"));}catch(e){}console.log("[TUNING BANNER]", JSON.stringify({flags:Object.keys((tuning.perField||{}).field_8||{}), hasBias:!!(tuning.perField&&tuning.perField.field_8&&tuning.perField.field_8.biasRightTotals)}));
import { spawnSync } from 'node:child_process'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const PKG = path.resolve(__dirname, '..')

// merge quarantine list from env (comma/space separated)
const QUAR_ENV = (process.env.QUARANTINE_FIELDS || '').split(/[, \t]+/).filter(Boolean)
if (QUAR_ENV.length) {
  console.log('ðŸ”¹ Quarantine fields from env:', QUAR_ENV.join(', '))
} else {
  console.log('ðŸ”¹ Quarantine fields from env: (none)')
}

// run the gate script in package cwd, pass env through
const gate = spawnSync('node', ['scripts/drift.gate.wrap.mjs'], {
  cwd: PKG,
  encoding: 'utf8',
  env: { ...process.env, QUARANTINE_FIELDS: QUAR_ENV.join(',') }
})

process.stdout.write(gate.stdout || '')
process.stderr.write(gate.stderr || '')
process.exit(gate.status ?? 0)
