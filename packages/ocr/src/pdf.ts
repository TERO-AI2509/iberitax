import fs from "node:fs/promises"; import { mkdtempSync, rmSync, existsSync } from "node:fs"; import os from "node:os"; import path from "node:path"; import { randomUUID } from "node:crypto"; import { execFile } from "node:child_process"; import { promisify } from "node:util"; import { ocrImageBuffer, type OcrOptions } from "./image.js"; const execFileAsync = promisify(execFile); export async function ocrPdfBuffer(pdf: Buffer, opts: OcrOptions = {}) { const tmpBase = mkdtempSync(path.join(os.tmpdir(), "iberitax-ocr-")); const pdfPath = path.join(tmpBase, randomUUID() + ".pdf"); await fs.writeFile(pdfPath, pdf); const outPrefix = path.join(tmpBase, "page"); await execFileAsync("pdftoppm", ["-r", "300", "-png", pdfPath, outPrefix]); const texts: string[] = []; let page = 1; for (;;) { const p = `${outPrefix}-${page}.png`; if (!existsSync(p)) break; const buf = await fs.readFile(p); const t = await ocrImageBuffer(Buffer.from(buf), opts); texts.push(t); page++; } rmSync(tmpBase, { recursive: true, force: true }); return texts.join("\n\n---\n\n"); }
