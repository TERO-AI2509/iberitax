/**
 * AUTO-GENERATED by scripts/codegen.ts
 * Do not edit manually. Source: JSON Schemas -> TypeScript
 */
/* eslint-disable */

// ---- deduction_tip.schema.json ----
export interface DeductionTip {
  id: string;
  title: string;
  description: string;
  eligibility: {
    reason: string;
    meetsCriteria: boolean;
  };
  estimatedSavings?: number;
}

// ---- extraction_result.schema.json ----
export interface ExtractionResult {
  jobId: string;
  sourceFiles: {
    filename: string;
    mimeType: string;
    pages?: number;
    [k: string]: unknown;
  }[];
  modelo100: Modelo100;
  confidence: {
    overall: number;
    fields?: {
      [k: string]: number;
    };
    [k: string]: unknown;
  };
  issues?: {
    severity: "info" | "warn" | "error";
    message: string;
    path?: string;
    [k: string]: unknown;
  }[];
}
export interface Modelo100 {
  taxYear: number;
  taxpayer: {
    nif: string;
    fullName: string;
    residencyStatus: "resident" | "non_resident";
  };
  spouse?: {
    nif?: string;
    fullName?: string;
  };
  incomes: {
    category: "employment" | "self_employment" | "capital" | "property" | "other";
    gross: number;
    withheld?: number;
  }[];
  deductions?: {
    code: string;
    description?: string;
    amount: number;
  }[];
  totals: {
    taxableBase: number;
    calculatedTax?: number;
    finalTaxDue?: number;
  };
}

// ---- modelo100.schema.json ----
export interface Modelo100 {
  taxYear: number;
  taxpayer: {
    nif: string;
    fullName: string;
    residencyStatus: "resident" | "non_resident";
  };
  spouse?: {
    nif?: string;
    fullName?: string;
  };
  incomes: {
    category: "employment" | "self_employment" | "capital" | "property" | "other";
    gross: number;
    withheld?: number;
  }[];
  deductions?: {
    code: string;
    description?: string;
    amount: number;
  }[];
  totals: {
    taxableBase: number;
    calculatedTax?: number;
    finalTaxDue?: number;
  };
}

// ---- plain_summary.schema.json ----
export interface PlainSummary {
  headline: string;
  bullets: string[];
  totals: {
    taxableBase: number;
    finalTaxDue: number;
    [k: string]: unknown;
  };
  disclaimers?: string[];
}

// ---- user_progress.schema.json ----
export interface UserProgress {
  userId: string;
  currentStep: "upload" | "extraction" | "review" | "summary" | "tips" | "complete";
  percent: number;
  lastUpdatedIso: string;
  checkpoints?: {
    step: string;
    completedIso: string;
  }[];
}

