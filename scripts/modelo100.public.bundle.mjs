#!/usr/bin/env node
import fs from 'node:fs/promises'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

const isMain = process.argv[1] && fileURLToPath(import.meta.url) === process.argv[1]

function minHtml(s){
  if(process.env.MINIFY_HTML==='1'){
    return s.replace(/\n+/g,'\n').replace(/>\s+</g,'><').trim()
  }
  return s
}

async function exists(p){
  try{ await fs.access(p); return true }catch{ return false }
}

async function main(){
  const APPLY = process.env.APPLY === '1'
  const repo = process.cwd()
  const a = (p)=>path.join(repo,'artifacts','modelo100',p)
  const outDir = a('public')

  const files = {
    insights: a('rules.insights.html'),
    dashboard: a('rules.dashboard.html'),
    owners: a('sla.owners.html'),
    exportJson: a('sla.export.json')
  }

  const plan = { outDir, need: files }

  if(!APPLY){
    console.log(JSON.stringify({ ok:true, apply:false, plan }, null, 2))
    return
  }

  await fs.mkdir(outDir,{ recursive:true })

  for(const [k,p] of Object.entries(files)){
    if(!(await exists(p))){
      console.error(JSON.stringify({ ok:false, missing:k, path:p }, null, 2))
      process.exit(2)
    }
  }

  const style = `
:root{--fg:#111;--bg:#fff;--muted:#666}
*{box-sizing:border-box}
body{margin:0;padding:1rem;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial;line-height:1.4;color:var(--fg);background:var(--bg)}
a{color:inherit;text-decoration:none;border-bottom:1px solid #ddd}
.grid{display:grid;gap:1rem}
.card{border:1px solid #eee;border-radius:14px;padding:1rem;box-shadow:0 1px 2px rgba(0,0,0,.04)}
h1{font-size:1.4rem;margin:.2rem 0 1rem}
code{background:#f7f7f7;padding:.15rem .35rem;border-radius:6px}
footer{margin-top:2rem;color:var(--muted);font-size:.9rem}
`
  await fs.writeFile(path.join(outDir,'style.css'), style.trimStart())

  const idx = `
<!doctype html>
<html lang="en">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Modelo 100 · SLA Bundle</title>
<link rel="stylesheet" href="./style.css">
<body>
  <h1>Modelo 100 · SLA Bundle</h1>
  <div class="grid">
    <div class="card"><a href="./rules.insights.html">Rules Insights</a></div>
    <div class="card"><a href="./rules.dashboard.html">Rules Dashboard</a></div>
    <div class="card"><a href="./sla.owners.html">Owner SLA Drill-downs</a></div>
    <div class="card"><a href="./sla.export.json"><code>sla.export.json</code></a></div>
  </div>
  <footer>Public bundle generated by modelo100.public.bundle.mjs</footer>
</body>
</html>
`
  await fs.writeFile(path.join(outDir,'index.html'), minHtml(idx))

  const copies = [
    ['rules.insights.html','rules.insights.html'],
    ['rules.dashboard.html','rules.dashboard.html'],
    ['sla.owners.html','sla.owners.html'],
    ['sla.export.json','sla.export.json']
  ]

  for(const [srcName,dstName] of copies){
    const src = a(srcName)
    const dst = path.join(outDir,dstName)
    const data = await fs.readFile(src,'utf8')
    const out = srcName.endsWith('.html') ? minHtml(data) : data
    await fs.writeFile(dst, out)
  }

  console.log(JSON.stringify({ ok:true, outDir, files: copies.map(([,d])=>path.join(outDir,d)) }, null, 2))
}

if(isMain){ main() }
