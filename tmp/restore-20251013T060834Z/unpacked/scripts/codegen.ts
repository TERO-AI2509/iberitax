// path: scripts/codegen.ts
import { compileFromFile } from "json-schema-to-typescript";
import { promises as fs } from "fs";
import path from "path";
import { globSync } from "glob";
import fse from "fs-extra";
import { jsonSchemaToZod } from "json-schema-to-zod"; // ✅ correct API

const ROOT = process.cwd();
const SCHEMAS_DIR = path.join(ROOT, "schemas");
const TYPES_OUT = path.join(ROOT, "packages/types/src/index.ts");
const ZOD_OUT = path.join(ROOT, "packages/validators/src/zod.ts");

const banner = (name: string) =>
  `/**\n * AUTO-GENERATED by scripts/codegen.ts\n * Do not edit manually. Source: ${name}\n */\n`;

async function generateTypes() {
  const files = globSync("*.schema.json", { cwd: SCHEMAS_DIR });
  let output = banner("JSON Schemas -> TypeScript");
  output += "/* eslint-disable */\n\n";

  for (const file of files.sort()) {
    const full = path.join(SCHEMAS_DIR, file);
    const ts = await compileFromFile(full, { bannerComment: "" });
    output += `// ---- ${file} ----\n`;
    output += ts + "\n";
  }

  await fse.ensureFile(TYPES_OUT);
  await fs.writeFile(TYPES_OUT, output, "utf8");
}

async function generateZod() {
  const files = globSync("*.schema.json", { cwd: SCHEMAS_DIR });
  let output = banner("JSON Schemas -> Zod validators");
  output += '/* eslint-disable */\nimport { z } from "zod";\n\n';

  for (const file of files.sort()) {
    const schemaJson = await fs.readFile(path.join(SCHEMAS_DIR, file), "utf8");
    const schemaObj = JSON.parse(schemaJson);
    const baseName = file.replace(".schema.json", ""); // e.g. extraction_result
    const varName = `${baseName.replace(/[^a-zA-Z0-9]/g, "_") }Schema`; // e.g. extraction_resultSchema

    // Produce just the zod expression (no imports/exports)
    const zodExpr = jsonSchemaToZod(schemaObj); // e.g. "z.object({ ... })"

    output += `// ---- ${file} ----\n`;
    output += `export const ${varName} = ${zodExpr};\n\n`;
  }

  await fse.ensureFile(ZOD_OUT);
  await fs.writeFile(ZOD_OUT, output, "utf8");
}

async function main() {
  await generateTypes();
  await generateZod();
  console.log("✅ Codegen complete");
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
